name: CI
on: [workflow_dispatch, push]  # Manually run workflow and trigger on push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    if: false
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          # cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build
        
  analyze_and_scan:
    if: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      if: false
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
          image-ref: "docker.io/sumitjeswani/netflix:${{ github.sha }}"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
    - name: install trivy
      if: false
      run: |
        #install trivy
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y
        #command to scan files
        trivy fs .
  Push:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: sumitjeswani/netflix:${{ github.sha }}
          build-args: |
            TMDB_V3_API_KEY=${{ secrets.TMDB_API_KEY }}
      - name: Run Trivy vulnerability scanner
        if: false
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "docker.io/sumitjeswani/netflix:${{ github.sha }}"
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Trivi Image Scan
        run: |
          #install trivy
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          #command to scan files
          trivy image docker.io/sumitjeswani/netflix:${{ github.sha }}
      
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Update image in deployment.yaml
        working-directory: ./Kubernetes
        run: |
          sed -i 's|sumitjeswani/netflix:.*|sumitjeswani/netflix: '${{ github.sha }}'|' deployment.yml
          git config --global user.name 'Sumit Jeswani'
          git config --global user.email 'jeswanisumit1999@gmail.com'
          git add deployment.yml
          git commit -m "Update deployment.yml"
          git push
